# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'rbconfig'

# Determine if arch is ARM
def arm_architecture?
  RbConfig::CONFIG['host_cpu'].downcase.start_with?('arm')
end

# Class to grab the vault password
class VaultPass
  def to_s
    print "Vault password: "
    vault_pass = STDIN.noecho(&:gets).chomp
  end
end

# Arrange nodes in reverse order so the manager is the last vm to be provisioned
cluster = {
  "metridoc-manager" => { 
    :ip => "10.10.3.201", 
    :cpus => 1, 
    :mem => 4096, 
    :port => 2020 
  }
}

Vagrant.configure("2") do |config|
  config.vagrant.plugins = [
    "vagrant-env", 
    "vagrant-vbguest", 
    "vagrant-hostsupdater"
  ]

  # Select correct box for arch
  if arm_architecture?
    config.vm.box = "bento/ubuntu-22.04"
  else
    config.vm.box = "ubuntu/jammy64"
  end

  # Install parallels plugin if user is on mac
  if Vagrant::Util::Platform::darwin?
    config.vagrant.plugins << "vagrant-parallels"
  end

  # Add domains to hosts file
  config.hostsupdater.aliases = {
    "10.10.3.201" => [
      "metridoc-dev.library.upenn.edu"
    ]
  }

  cluster.each_with_index do |(hostname, info), index|

    # Use the default insecure key as this is only used for development
    config.ssh.insert_key = false

    config.vm.define hostname do |cfg|
      cfg.vm.network :private_network, ip: "#{info[:ip]}"
      cfg.vm.network :forwarded_port, id: "ssh", host: info[:port], guest: 22
      cfg.vm.hostname = hostname

      # Virtual Box Settings
      cfg.vm.provider :virtualbox do |vb, override|
        vb.name = hostname
        vb.customize [
          "modifyvm", :id, 
          "--memory", info[:mem], 
          "--cpus", info[:cpus], 
          "--hwvirtex", "on"
        ]
        # push the first interface far out enough to minimize potential conflict with docker swarm
        # which defaults to 10.0.0.0/8 for networks/containers
        vb.customize ["modifyvm", :id, "--natnet1", "10.252/16"]
      end

      # Parallels Settings for Mac Environment
      # https://github.com/sprotheroe/vagrant-disksize/issues/45
      # To get parallels working you may need to run:
      #   vagrant plugin uninstall vagrant-disksize
      cfg.vm.provider :parallels do |prl, override|
        prl.name = hostname
        prl.memory = info[:mem]
        prl.cpus = info[:cpus]
      end

      # Update and install packages
      cfg.vm.provision "shell", inline: <<-SHELL
        apt-get update 
        apt-get install -y python3-pip
      SHELL

      # Run the ansible playbook after the manager vm has been provisioned
      if hostname == "metridoc-manager"
        # only if you need to expose on your local network; usually not necessary
        # cfg.vm.provider :virtualbox do |vb, override|
        #   override.vm.network :forwarded_port, id: "http", host: 8080, guest: 80
        # end
        
        # Get the vault password and assign it to a tmp file
        cfg.vm.provision "shell", env: {"VAULT_PASS" => VaultPass.new}, inline: <<-SHELL
          printf '%s\n' "${VAULT_PASS}" > /tmp/vault_pass
        SHELL

        # Add volumes for development
        config.vm.synced_folder "../", "/metridoc"

        cfg.vm.provision :ansible_local do |ansible|
          # Force Ansible to use verion 2
          ansible.compatibility_mode = "2.0"
          # Force Vault password input
          # ansible.ask_vault_pass = true
          # Set default for Ansible Paths
          ansible.config_file = "/metridoc/ansible/ansible.vagrant.cfg"
          # Pass file containing password
          ansible.vault_password_file = "/tmp/vault_pass"
          # Extra variables to pass to ansible
          ansible.extra_vars = {
            ansible_python_interpreter: "/usr/bin/env python3"
          }
          ansible.install_mode = "pip3"
          # Set path to hosts file
          ansible.inventory_path = "/metridoc/ansible/inventories/vagrant"
          # Set path to requirements file
          ansible.galaxy_role_file = "/metridoc/ansible/roles/requirements.dev.yml"
          # Set path to roles location
          ansible.galaxy_roles_path = "/metridoc/ansible/roles"
          # Install all roles needed for deployment from the requirements file
          ansible.galaxy_command = "ansible-galaxy install -r %{role_file} --force"
          ansible.limit = "all"
          # Set path to the Ansible playbook
          ansible.playbook = "/metridoc/ansible/vagrant.yml"
          # Enable verbosity
          ansible.verbose = true
        end

        # Remove Vault Password
        cfg.trigger.after [:provision, :reload, :resume, :up] do |trigger|
          trigger.info = "Removing vault password"
          trigger.run_remote = { inline: <<-SHELL
              rm -fr /tmp/vault_pass
            SHELL
          }
        end
      end
    end
  end
end
