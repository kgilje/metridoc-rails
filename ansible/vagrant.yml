---
- name: "Set up nginx reverse proxy with ssl termination to mimic a reverse-proxy/loadbalancer"
  become: true
  hosts: docker_swarm_manager
  collections:
    - nginxinc.nginx_core
  pre_tasks:
    - name: Create a self-signed cert for nginx
      command: >
        openssl req -x509 -nodes -subj '/CN={{ shibboleth['templates']['configs']['shib2']['values']['fqdn'] }}' -days 365
        -newkey rsa:4096 -sha256 -keyout {{ proxy.ssl.key.location }} -out {{ proxy.ssl.crt.location }}
        creates={{ proxy.ssl.crt.location }}
    - name: Upgrade Jinja2
      pip:
        name:
          - jinja2==3.1.4
  tasks:
    - name: Install NGINX
      ansible.builtin.include_role:
        name: nginx
    - name: Configure NGINX
      ansible.builtin.include_role:
        name: nginx_config
      vars:
        nginx_config_http_template_enable: true
        nginx_config_http_template:
          - template_file: http/default.conf.j2
            deployment_location: /etc/nginx/conf.d/default.conf
            config:
              servers:
                - core:
                    listen:
                      - address: 0.0.0.0
                        port: 443
                        ssl: true
                    server_name: "{{ shibboleth['templates']['configs']['shib2']['values']['fqdn'] }}"
                  ssl: # Configure SSL
                    certificate: "{{ proxy.ssl.crt.location }}"
                    certificate_key: "{{ proxy.ssl.key.location }}"
                  log: # Configure Logs
                    access:
                      - path: /var/log/nginx/access.log
                        format: main
                    error: 
                      - file: /var/log/nginx/error.log
                        level: warn
                  locations: # Configure Reverse Proxy
                    - location: /
                      proxy:
                        pass: http://127.0.0.1:80
                        set_header:
                              - field: Host
                                value: $host
                              - field: X-Real-IP
                                value: $remote_addr
                              - field: X-Forwarded-For
                                value: $proxy_add_x_forwarded_for
                              - field: X-Forwarded-Proto
                                value: $scheme

- name: "Mimic NFS share for ezpaarse"
  become: yes
  hosts: docker_swarm_manager
  tasks:
    - name: Install NFS
      package:
        name: nfs-kernel-server
        state: present
    - name: Create a directory to mount
      file:
        path: /ezpaarse-input
        state: directory
        owner: nobody
        group: nogroup
        mode: "0777"
    - name: Grant NFS share access
      lineinfile:
        path: "/etc/exports"
        line: "/ezpaarse-input 127.0.0.1(rw,sync,no_subtree_check)"
    - name: Export NFS share dir
      shell: exportfs -a
    - name: Restart NFS
      service:
        name: nfs-kernel-server
        state: restarted

- name: "Provision Docker Swarm Cluster"
  become: yes
  hosts: docker_swarm_manager
  gather_facts: true
  roles:
    - { role: atosatto.docker-swarm }
  tasks:
    - name: Install deps
      pip:
        name:
          - jsondiff
          - passlib
          - pyyaml
          - requests==2.31.0
      tags: deps
    - name: Create metridoc docker image
      docker_image:
        build:
          path: "/metridoc/"
          pull: yes
        force_tag: yes
        force_source: yes
        name: "quay.io/upennlibraries/metridoc:local"
        source: build
        state: present
    - name: Create python jobs docker image
      docker_image:
        build:
          path: "/metridoc/ansible/roles/python_jobs_manager/files/src/"
          pull: yes
        force_tag: yes
        force_source: yes
        name: "quay.io/upennlibraries/metridoc-python-jobs:local"
        source: build
        state: present
    - name: Create ezpaarse docker image
      docker_image:
        build:
          dockerfile: "/metridoc/ansible/roles/ezpaarse_manager/files/ezpaarse/Dockerfile"
          path: "/metridoc/ansible/roles/ezpaarse_manager/files/ezpaarse/"
          pull: yes
        force_tag: yes
        force_source: yes
        name: "quay.io/upennlibraries/metridoc-ezpaarse:local"
        source: build
        state: present
    - name: Create ezpaarse mongodb docker image
      docker_image:
        build:
          dockerfile: "/metridoc/ansible/roles/ezpaarse_manager/files/mongodb/Dockerfile"
          path: "/metridoc/ansible/roles/ezpaarse_manager/files/mongodb/"
          pull: yes
        force_tag: yes
        force_source: yes
        name: "quay.io/upennlibraries/metridoc-ezpaarse-mongodb:local"
        source: build
        state: present
    - import_role:
        name: postgres_primary_manager
    - import_role:
        name: postgres_replica_manager
    - import_tasks: "roles/ezpaarse_manager/tasks/ezpaarse_input_volume.yml"
    - import_tasks: "roles/ezpaarse_manager/tasks/ezpaarse_output_volume.yml"
    - import_tasks: "roles/metridoc_manager/tasks/gate_count_volume.yml"
    - import_tasks: "roles/shibboleth_sp/tasks/create_docker_network.yml"
    - import_role:
        name: metridoc_manager
    - import_role:
        name: ezpaarse_manager
    - name: Update permissions and mounts for dev env
      block:
        - name: Scale down metridoc_app, metridoc_delayed_jobs, and metridoc_replica-db services
          command: docker service scale metridoc_app=0 metridoc_delayed_jobs=0 metridoc_replica-db=0
        - getent:
            database: passwd
            key: vagrant
        - name: update UID and GID and mount folders in metridoc_app containers
          command: >
            docker service update
              --env-add APP_USER_UID={{ getent_passwd.vagrant.1 }}
              --env-add APP_USER_GID={{ getent_passwd.vagrant.2 }}
              --mount-add type=bind,source=/metridoc/,target=/home/app/webapp/
              --args /home/app/webapp/local_docker_init.sh
              metridoc_app
        - name: Scale up metridoc_app
          command: docker service scale metridoc_app={{ docker_stack_env.METRIDOC_REPLICAS }}
        - name: update UID and GID and mount folders in delayed_job containers
          command: >
            docker service update
              --env-add APP_USER_UID={{ getent_passwd.vagrant.1 }}
              --env-add APP_USER_GID={{ getent_passwd.vagrant.2 }}
              --mount-add type=bind,source=/metridoc/,target=/home/app/webapp/
              --args /home/app/webapp/local_docker_job_init.sh
              metridoc_delayed_jobs
        - name: Scale up metridoc_delayed_jobs and metridoc_replica-db
          # command: docker service scale metridoc_delayed_jobs=1 metridoc_replica-db=1
          command: docker service scale metridoc_delayed_jobs=1
    - import_role:
        name: python_jobs_manager
    - name: Update permissions and mounts for dev env
      block:
        - name: Scale down metridoc_python_jobs service
          command: docker service scale metridoc_python_jobs=0
        - getent:
            database: passwd
            key: vagrant
        - name: update UID and GID and mount folders in metridoc_python_jobs container
          command: >
            docker service update
              --env-add APP_USER_UID={{ getent_passwd.vagrant.1 }}
              --env-add APP_USER_GID={{ getent_passwd.vagrant.2 }}
              --mount-add type=bind,source=/metridoc/ansible/roles/python_jobs_manager/files/src/,target=/home/app/
              metridoc_python_jobs
        - name: Scale up metridoc_python_jobs service
          command: docker service scale metridoc_python_jobs=1
    - import_role:
        name: jenkins_manager
    - import_role:
        name: monitoring_manager
    - import_role:
        name: shibboleth_sp
